     1                                  ; Program Description: [Insert Description Here]
     2                                  ; Author: Michel Eter
     3                                  ; Creation Date: 02/14/2018
     4                                  ; Revisions: [Insert Any Revisions]
     5                                  ; Date:              Modified by: Michel Eter
     6                                  ; Operating System: Mint Linux
     7                                  ; IDE/Compiler: Geany
     8                                  
     9                                  %include "./functions.inc"
    10                              <1> ;
    11                              <1> ;Include file for the functions library
    12                              <1> ;
    13                              <1> sys_exit	equ	1h
    14                              <1> sys_read	equ	3h
    15                              <1> sys_write	equ	4h
    16                              <1> stdin		equ	0h
    17                              <1> stdout		equ	1h
    18                              <1> stderr		equ	3h
    19                              <1> 
    20                              <1> ;Print a string with no delimeter to the console
    21                              <1> ;Arguments:	Address of the String (Stack)
    22                              <1> ;			Length of the String (Stack)
    23                              <1> extern		PrintText
    24                              <1> 
    25                              <1> ;Print an endl character to the console
    26                              <1> ;Arguments:	None
    27                              <1> extern		Printendl
    28                              <1> 
    29                              <1> ;Print a 32bit numeric value as a Decimal to the console
    30                              <1> ;Arguments:	DWORD Value (stack)
    31                              <1> extern		Print32bitNumDecimal
    32                              <1> 
    33                              <1> ;Print a 32bit signed numeric value as a Decimal to the console
    34                              <1> ;Arguments:	DWORD Value (stack)
    35                              <1> extern		Print32bitSNumDecimal
    36                              <1> 
    37                              <1> ;Print a 32bit numeric value as a Binary to the console
    38                              <1> ;Arguments:	DWORD Value (stack)
    39                              <1> extern		Print32bitNumBinary
    40                              <1> 
    41                              <1> ;Print a 32bit numeric value as a Binary to the console
    42                              <1> ;Arguments:	DWORD Value (stack)
    43                              <1> extern		Print32bitFullBinary
    44                              <1> 
    45                              <1> ;
    46                              <1> ;Print a full 32-bits binary number in Floating Point format.
    47                              <1> ;Stack contents:
    48                              <1> ;	Value to Print to an Ascii String
    49                              <1> extern		Print32bitFloatBinary
    50                              <1> 
    51                              <1> ;Print a 32bit numeric value as a Hexidecimal to the console
    52                              <1> ;Arguments:	DWORD Value (stack)
    53                              <1> extern		Print32bitNumHex
    54                              <1> 
    55                              <1> ;Print The General Purpose Registers to the console
    56                              <1> ;Arguments:	None
    57                              <1> extern		PrintRegisters
    58                              <1> 
    59                              <1> ;Print The floating point Registers to the console
    60                              <1> ;Arguments:	None
    61                              <1> extern		PrintFloatingRegisters
    62                              <1> 
    63                              <1> ;Print a string with an ending 00h delimiter to the console
    64                              <1> ;Arguments:	Address of the String (Stack)
    65                              <1> extern		PrintString
    66                              <1> 
    67                              <1> ;Print a space to the console
    68                              <1> ;Arguments:	None
    69                              <1> extern		PrintSpace
    70                              <1> 
    71                              <1> ;Print a comma followed by a space to the console
    72                              <1> ;Arguments:	None
    73                              <1> extern		PrintComma
    74                              <1> 
    75                              <1> ;Print a Double Word floating point number
    76                              <1> ;Arguments: The floating point number to be printed (Stack)
    77                              <1> extern		PrintDWFloat
    78                              <1> 
    79                              <1> ;Call the function to get the CPU's Time Stamp Counter
    80                              <1> ;Arguments: None
    81                              <1> ;Return:  eax
    82                              <1> extern		GetTSC
    83                              <1> 
    84                              <1> ;Input Unsigned Int	
    85                              <1> ;This function will let the user input a string, then it will check it to make sure it
    86                              <1> ;is a positive integer.  It will then convert the ASCII string into a DWORD and return
    87                              <1> ;that value in the EAX register.
    88                              <1> ;Arguments: None
    89                              <1> ;Return: 	eax will contain the usigned ingeter
    90                              <1> ;			Carry flag will be set if invalid integer was input
    91                              <1> extern		InputUInt
    92                              <1> 
    93                              <1> ;Input Signed Int  TBD (just copied from input unsigned int - no code updated)
    94                              <1> ;This function will let the user input a string, then it will check it to make sure it
    95                              <1> ;is a positive integer.  It will then convert the ASCII string into a DWORD and return
    96                              <1> ;that value in the EAX register.
    97                              <1> ;Arguments: None
    98                              <1> ;Return: 	eax will contain the usigned ingeter
    99                              <1> ;			Carry flag will be set if invalid integer was input
   100                              <1> extern		InputSInt
   101                              <1> 
   102                              <1> ;Input Binary Number	
   103                              <1> ;This function will let the user input a string, then it will check it to make sure it
   104                              <1> ;is a binary number.  It will then convert the ASCII string into a DWORD and return
   105                              <1> ;that value in the EAX register.
   106                              <1> ;Arguments: None
   107                              <1> ;Return: 	eax will contain the number
   108                              <1> ;			Carry flag will be set if invalid binary number was input
   109                              <1> extern		InputBin
   110                              <1> 
   111                              <1> ;Input Hexidecimal Number	
   112                              <1> ;This function will let the user input a string, then it will check it to make sure it
   113                              <1> ;is a binary number.  It will then convert the ASCII string into a DWORD and return
   114                              <1> ;that value in the EAX register.
   115                              <1> ;Arguments: None
   116                              <1> ;Return: 	eax will contain the number
   117                              <1> ;			Carry flag will be set if invalid binary number was input
   118                              <1> extern		InputHex
   119                              <1> 
   120                              <1> ;Input a Floating Point Number	
   121                              <1> ;This function will let the user input a string, then it will check it to make sure it
   122                              <1> ;is a valid decimal number.  It will then convert the ASCII string into a DWORD and return
   123                              <1> ;that value in the ST(0) register.
   124                              <1> ;Arguments: None
   125                              <1> ;Return: 	eax will contain the number
   126                              <1> ;			Carry flag will be set if invalid binary number was input
   127                              <1> extern		InputFloat
   128                              <1> 
   129                                  
   130                                  bits 32
   131                                  section .data  ;Initialized data definitions go here
   132 00000000 10                          A   db  10h
   133 00000001 0020                        B   dw  2000h
   134 00000003 00000300                    C   dd  30000h
   135 00000007 00000000                    D   dd  0h
   136 0000000B 4571756174696F6E20-         eq1 db  "Equation 1: A+(B+C)=D", 0dh, 0ah, 0h
   137 00000014 313A20412B28422B43-
   138 0000001D 293D440D0A00       
   139 00000023 4571756174696F6E20-         eq2 db  "Equation 2: (A+C)-B=D", 0dh, 0ah, 0h
   140 0000002C 323A2028412B43292D-
   141 00000035 423D440D0A00       
   142 0000003B 413A2000                    arr1    db  "A: ", 0h
   143 0000003F 423A2000                    arr2    db  "B: ", 0h
   144 00000043 433A2000                    arr3    db  "C: ", 0h
   145 00000047 4571756174696F6E20-         arr4    db  "Equation 1: D = ", 0h
   146 00000050 313A2044203D2000   
   147 00000058 4571756174696F6E20-         arr5    db  "Equation 2: D = ", 0h
   148 00000061 323A2044203D2000   
   149                                  
   150                                  section .bss   ;Uninitialized memory reservations go here
   151                                  
   152                                  section .text
   153                                  
   154                                  global _start
   155                                  _start:
   156 00000000 90                        nop
   157 00000001 B800000000                  mov eax, 0h                         ;Zero out eax register
   158                                  
   159 00000006 68[0B000000]                push eq1
   160 0000000B E8(00000000)                call PrintString
   161 00000010 68[23000000]                push eq2
   162 00000015 E8(00000000)                call PrintString
   163 0000001A E8(00000000)                call Printendl
   164                                  
   165 0000001F 68[3B000000]                push arr1
   166 00000024 E8(00000000)                call PrintString
   167 00000029 A0[00000000]                mov al, [A]
   168 0000002E 50                          push DWORD eax
   169 0000002F E8(00000000)                call Print32bitNumHex
   170 00000034 E8(00000000)                call Printendl
   171 00000039 B800000000                  mov eax, 0h
   172                                      
   173 0000003E 68[3F000000]                push arr2
   174 00000043 E8(00000000)                call PrintString
   175 00000048 66A1[01000000]              mov ax, [B]
   176 0000004E 50                          push DWORD eax
   177 0000004F E8(00000000)                call Print32bitNumHex
   178 00000054 E8(00000000)                call Printendl
   179 00000059 B800000000                  mov eax, 0h
   180                                  
   181 0000005E 68[43000000]                push arr3
   182 00000063 E8(00000000)                call PrintString
   183 00000068 A1[03000000]                mov eax, [C]
   184 0000006D 50                          push DWORD eax
   185 0000006E E8(00000000)                call Print32bitNumHex
   186 00000073 E8(00000000)                call Printendl
   187 00000078 E8(00000000)                call Printendl
   188 0000007D B800000000                  mov eax, 0h
   189                                                                          ;End of print statements
   190                                      
   191 00000082 66A1[01000000]              mov ax,     [B]                     ;Equation 1
   192 00000088 0305[03000000]              add eax,    [C]
   193 0000008E 0205[00000000]              add al,     [A]
   194 00000094 A3[07000000]                mov [D],    eax
   195                                  
   196 00000099 68[47000000]                push arr4
   197 0000009E E8(00000000)                call PrintString
   198 000000A3 FF35[07000000]              push DWORD [D]
   199 000000A9 E8(00000000)                call Print32bitNumHex
   200 000000AE E8(00000000)                call Printendl
   201 000000B3 B800000000                  mov eax, 0h
   202                                  
   203 000000B8 A0[00000000]                mov al,     [A]                     ;Equation 2
   204 000000BD 0305[03000000]              add eax,    [C]
   205 000000C3 2B05[01000000]              sub eax,     [B]
   206 000000C9 A3[07000000]                mov [D],    eax
   207                                  
   208 000000CE 68[58000000]                push arr5
   209 000000D3 E8(00000000)                call PrintString
   210 000000D8 FF35[07000000]              push DWORD [D]
   211 000000DE E8(00000000)                call Print32bitNumHex
   212 000000E3 E8(00000000)                call Printendl
   213 000000E8 B800000000                  mov eax, 0h
   214                                    ;Code ends here
   215 000000ED 90                        nop
   216 000000EE B801000000                mov eax,1 ; Exit system call value
   217 000000F3 BB00000000                mov ebx,0 ; Exit return code
   218 000000F8 CD80                      int 80h ; Call the kernel
